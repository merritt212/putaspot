{"name":"Putaspot","body":"#What is it?\r\n\r\nPutaspot is meant to be a simple boilerplate for applications using geotagged content. The basic idea is that any URL can be associated with location data.\r\n\r\nIt was put together due to boredome during a couple of summer afternoons by <a href=\"http://twitter.com/nlindblad\">@nlindblad</a> and <a href=\"http://twitter.com/mossisen\">@Mossisen</a>.\r\n\r\n#License\r\n\r\nDistributed under the GNU AFFERO GENERAL PUBLIC LICENSE <http://www.gnu.org/licenses/agpl-3.0.html>.\r\n\r\nAll logos and trademarks are the property of the respective trademark owners.\r\n\r\n#Screenshots\r\n\r\n##Desktop Version\r\nGoogle Maps API, HTML5 navigation (for positioning) and JQuery.\r\n\r\n<img src=\"http://dl.dropbox.com/u/1236795/putaspot-desktop.png\" />\r\n\r\n##Mobile Version\r\njQuery Mobile, jQuery and HTML5 navigation (for positioning).\r\n\r\n<img src=\"http://dl.dropbox.com/u/1236795/putaspot-mobile.png\" />\r\n\r\n#API\r\n\r\nThere are serveral ways to extend the functionality of this simple application. Either by integrating into other applications or extending the content handling directly.\r\n\r\n##External (HTTP)\r\nThe same end-points used by both the desktop and mobile version can be used as a stand-alone API for other applications:\r\n\r\n\tGET /near.json?lat=53.967644&lng=13.993422\r\n\t\r\nWill result in a JSON list of content near the given location:\r\n\t\r\n\t[\r\n\t    {\r\n\t        \"_id\": {\r\n\t            \"$id\": \"4fce736227cd5c953a000000\"\r\n\t        },\r\n\t        \"loc\": [\r\n\t            53.9676547,\r\n\t            13.9935683\r\n\t        ],\r\n\t        \"added\": 1338930018,\r\n\t        \"expires\": 1339534818,\r\n\t        \"service\": \"spotify\",\r\n\t        \"type\": \"song\",\r\n\t        \"artist\": \"Bomfunk MC's\",\r\n\t        \"track\": \"Freestyler\",\r\n\t        \"popularity\": \"0.46590\",\r\n\t        \"length\": 306\r\n\t    },\r\n\t    {\r\n\t        \"_id\": {\r\n\t            \"$id\": \"4fce5d0427cd5c6830000000\"\r\n\t        },\r\n\t        \"loc\": [\r\n\t            53.967821261857,\r\n\t            13.993965139951\r\n\t        ],\r\n\t        \"added\": 1338924292,\r\n\t        \"expires\": 1339529092,\r\n\t        \"service\": \"spotify\",\r\n\t        \"type\": \"song\",\r\n\t        \"artist\": \"Kraftwerk\",\r\n\t        \"track\": \"Computer Love\",\r\n\t        \"popularity\": \"0.00000\",\r\n\t        \"length\": 435.573\r\n\t    }\r\n\t]\r\n\t\r\nIn order to retrieve a piece of content, the user must be nearby:\r\n\r\n\tGET /single.json?lat=53.967644&lng=13.993422&id=4fce5d0427cd5c6830000000\r\n\t\r\nwill either return 'null' (if not close enough) or the content (with URL) if the user is within reach.\r\n\r\n##Internal (Plugins)\r\n\r\nWhenever a piece of content is analyzed by the back-end (before being added to the database) the top domain (e.g. \"spotify.com\") is extracted and formatted as\r\n\r\n\t$class = str_replace('.', '_', ucfirst($service));\r\n\t\r\nwhich would turn \"spotify.com\" into \"Spotify_com\".\r\n\r\nThe next step is to try to find a matching file in the library/Meta/ directory. If a file is found, it is included a new instance of the presumed class is created:\r\n\r\n\t$meta = new $class;\r\n\t\r\nIn the last step the content array (so far only containing geotag and URL) is passed through the resolve() method of the plugin class:\r\n\r\n\t$content = $meta->resolve($content);\r\n\t\r\nInside the plugin class things like meta-data lookup can be done. Check out the default plugin classes that retrieves meta-data about content from Youtube, Spotify and Soundcloud.\r\n\r\n##Install\r\n\r\nRequirements:\r\n\r\n* PHP5 (only tested with PHP 5.3)\r\n* MongoDB extension for PHP\r\n* MongoDB 2.0.5 (should work with as low as 1.9)\r\n\r\n### Geospatial Indexing in MongoDB\r\n\r\nTo turn on Geospatial indexing:\r\n\r\n\tuse YOURDATABASENAME;\r\n\tdb.content.ensureIndex( { loc : \"2d\" } );\r\n\tdb.log.ensureIndex( { loc : \"2d\" } );\r\n\r\n###Apache2 VirtualHost Example\r\n\r\n\t<VirtualHost *:80>\r\n\t\t\tServerAdmin you@yourdomain.com\r\n        \tServerName      yourdomain.com\r\n\t\t\tServerAlias     youralias.com\r\n\t\t\tVirtualDocumentRoot /var/www/pathtoputaspot/public/\r\n\t\t\t<Directory /var/www/pathtoputaspot/public/>\r\n\t\t\t\tAllowOverride All\r\n\t\t\t\tAllow from All\r\n\t\t\t\tSatisfy Any\r\n\t\t\t</Directory>\r\n\t\t\tLimitInternalRecursion 15\r\n\t\t\tLogFormat \"%v %h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-agent}i\\\"\" vcommon\r\n\t\t\tErrorLog /var/log/apache2/error.log\r\n\t\t\tLogLevel debug\r\n \t\t\tCustomLog /var/log/apache2/access.log vcommon\r\n\t</VirtualHost>\r\n\t\r\n###Application Configuration (config.ini)\r\n\r\n\t[database]\r\n\tname=\"YOURDATABASENAME\"\r\n\thost=\"localhost\"\r\n\tport=27017\r\n\r\n\t[putaspot]\r\n\texpiration=604800\r\n\tdistance=0.0045026898\r\n\texplore_distance=0.14492753623188406\r\n\t\r\n\t[soundcloud]\r\n\tapi_key=\"YOURSOUNDCLOUD_API_KEY\"\r\n\t\r\n* expiration: After this period (seconds) the content will no longer be listed.\r\n\r\n* distance: Allowed distance to \"discover\" as a user. Defaults to about 250 meters.\r\n\r\n* explore_distance: Limit for Google map refresh at zoom/pan. Defaults to about 10 miles.\r\n\r\n* api_key: Soundcloud API key <http://developers.soundcloud.com/>","tagline":"Putaspot is a simple but awesome service/framework for geo based discovery and sharing of all kinds of digital content. Spotify (tracks and playlists), Soundcloud, Youtube and Mixcloud are playable using the map!","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}